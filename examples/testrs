mod my_test {
  
  

  trait Naming {
    pub name: String;

    pub fn show_name(self) {
      self.name;
    }
  }

  #[derive(Serialize, Deserialize)]
  #[derive(Debug, Clone, Default, PartialEq)]
pub struct Animal {
    pub name: String;
    pub sound: Option<String>;
    pub age: i32;
  }

  #[derive(Debug, Clone, Default, PartialEq)]
struct Cat  Animal {
    playful: bool;
  }

  impl Naming for Cat {
  }

  impl Cat {
    pub fn full_name(borrow self, last_name as String): Result<String, String> {
      if last_name  {
         Ok(format!("{} {}", self.name, last_name))
      } else {
         Err("Missing last name")
      }
    }
  }

  let cat_1 = Cat::new(name: "Fl%ur", age: 1, playful: false);
  let cat_2 = Cat::new(name: "Fofo", age: 2, playful: true);

  if cat_1.name == "Fl%ur"  {
    println!("my name is Flur")
  } else {
    println!(format!("my name is not Flur is {}", cat_1.show_name()))
  }

  if cat_2.full_name(last_name: "Marshal") != "Tom"  {
    println!("my name is not Tom")
  }

  if (4 + 5 == 9) and (7 / 8 != 20)  {
    println!("This is printed")
  }

  println!("My full name is {}", cat.full_name("Doe"))
    
  let my_array = [1, 2, 3, 4];
  let my_tuple = (1, 2);
  let my_hash_map : std::collections::HashMap<&str, _> = [
    (
        "uno",
        " 1",
    ),
    (
        "dos",
        " 2",
    ),
].iter().cloned().collect();
  let my_vector = vec![1, 2, 3, 4]

  #[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
enum States {
    Approved;
    Cancelled;
    Disable;
    Rejected;
  }

  let state = States::Approved;

   state {
    Approved 