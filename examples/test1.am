module my_test do
  // This is a testing file
  /* This is a 
  * block comment
  *
  */

  trait Naming do
    public name as String

    public function show_name(self) do
      return self.name
    end
  end

  derive(Serialize, Deserialize)
  public struct Animal do
    public name as String
    public sound as Option<String>
    public age as Int32
  end

  struct Cat inherits Animal do
    playful as Boolean
  end

  implements Naming for Cat do
  end

  implements Cat do
    public function full_name(borrow self, last_name as String) as Result<String, String> do
      if last_name then do
        return Ok(format!("{} {}", self.name, last_name))
      else do
        return Err("Missing last name")
      end
    end
  end

  let cat_1 = Cat::new(name: "Fl%ur", age: 1, playful: false)
  let cat_2 = Cat::new(name: "Fofo", age: 2, playful: true)

  if cat_1.name equal "Fl%ur" then do
    println!("my name is Flur")
  else do
    println!(format!("my name is not Flur is {}", cat_1.show_name()))
  end

  if cat_2.full_name(last_name: "Marshal") not equal "Tom" then do
    println!("my name is not Tom")
  end

  if (4 + 5 equal 9) and (7 / 8 not equal 20) then do
    println!("This is printed")
  end

  println!("My full name is {}", cat.full_name("Doe"))
    
  let my_array = [1, 2, 3, 4]
  let my_tuple = (1, 2)
  let my_hash_map = {uno: 1, dos: 2}
  let my_vector = vec![1, 2, 3, 4]

  enum States do
    Approved
    Cancelled
    Disable
    Rejected
  end

  let state = States::Approved

  match state do
    Approved => "Bill Approved"
    Rejected => "Bill Rejected"
  end

  macro_rules! foo do
    ($arg as ident) => do
      return println!("{}", $arg)
    end
  end

  let result_number = Ok(87)

  let borrowed_number = borrow result_number.unwrap()

  let another_borrowed_number = unwrap |> result_number |> borrow
end
